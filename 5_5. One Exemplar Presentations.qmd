---
title: "5_5. One Exemplar"
format: html
editor: visual
---

```{r, load packages and wd, warning = FALSE, message = FALSE, echo = FALSE}
library(qgraph)
library(mgm)
library(RColorBrewer)
library(scales)
library(psych)
library(furrr)
library(tidyverse)

set.seed(420)

wd <- getwd()
setwd(wd)
```

Load Data

```{r}
load(sprintf("%s/Data/p25637.RData", wd)) #exemplar for presentation
p25637$obs
p25637$bandwidth
```

Resample for CIs

```{r, eval = FALSE}
x <- p25637$data
x <- as.data.frame(x) %>%
  select(Sociability:CrtvImagination) %>%
  as.matrix()

p25637_res <- resample(object = p25637$tvmgm[[1]],
           data = x,
           nB = 50,
           blocks = 10,
           seeds = 1:50,
           quantiles = c(.05, .95),
           pbar = TRUE)
save(p25637_res, file = "Data/p25637_res.RData")
```

```{r}
mean_wadj <- apply(p25637[[5]][[1]][["pairwise"]][["wadj"]], 1:2, mean)
par_ests <- (p25637[[5]][[1]][["pairwise"]][["wadj"]])
ind_negative <- which(p25637[[5]][[1]][["pairwise"]][["signs"]] == -1, arr.ind = T)
par_ests[ind_negative] <- par_ests[ind_negative] * -1

Q_shit <- qgraph(t(mean_wadj), layout="spring", DoNotPlot=T, repulsion=0.7)
#save(Q_shit, file = "Data/Q_shit.RData") #for stationary network

#check otut parameter estimates range
par_ests_range <- range(as.vector(par_ests))
```

```{r}
# Plot graph at selected fixed time points
tpSelect <- 1:10

#group by trait
traitgroups <- list("Extraversion" = c(1:3), #columns in df
                    "Agreeableness" = c(4:6),
                    "Conscientiousness" = c(7:9),
                    "Neuroticism" = c(10:12),
                    "Openness" = c(13:15)
                    )

#default plotting settings
theme_set(theme_bw(base_size = 14, base_family="Times") )
theme_update(legend.position="bottom", 
             panel.spacing=grid::unit(0,"lines"),
             strip.background=element_rect(color="black",fill="white"),
             panel.grid=element_blank())

p25637mgmplots <- list()
for(tp in tpSelect){
  p25637mgmplots[[tp]] <- qgraph(par_ests[, , tp], #parameter estimates to graph
             layout = Q_shit$layout, #using mean; "spring" has overlapping nodes
             groups = traitgroups, #group traits by color
             palette = 'colorblind',
             width = 15 * 1.4, # width of figure
             height = 16, # height of figure,
             border.width = 0.5,
             label.cex = 0.7, # scalar on label size
             label.color = 'black', # string on label colors
             label.prop = 0.9, 
             negDashed = T, #this aint workin
             loop = 0.7,
             edge.color = t(p25637$tvmgm[[1]][["pairwise"]][["edgecolor"]][, 1, tp]), 
             labels = colnames(as.data.frame(p25637$data)[3:17]), #variable names
             minimum = 0.1, #min value for edge to be shown
             maximum = 1, #max to scale edge weights
             threshold = 0.1,
             title.cex=2, #title size
             border.color = "grey60", edge.color = "grey60", 
             trans=1,fade=F,
             vTrans = 190, # transparency of the nodes to better determine edges crossing node areas
             details = F, shape = "ellipse", node.width=1, node.height=.6, # node appearance
             vsize = 13, #node size 
             asize = 4, #arrow head size
             edge.width=.6,
             edge.labels = TRUE,
             label.font=15, 
             label.scale=F,
             legend = FALSE,
             title=paste("Estimation Point ", as.character(tp)),
             layoutOffset=c(0,0), 
             GLratio=3.5, 
             layoutScale=c(.8, .8))
}
```

```{r, echo = FALSE}
pdf("p25637 contemporaneous networks.pdf")
for (i in 1:length(p25637mgmplots)){
  plot(p25637mgmplots[[i]])
}
dev.off()
```

Remove title stuff for presentation

```{r}
p25637mgmplots_pres <- list()
for(tp in tpSelect){
  p25637mgmplots_pres[[tp]] <- qgraph(par_ests[, , tp], #parameter estimates to graph
             layout = Q_shit$layout, #using mean; "spring" has overlapping nodes
             groups = traitgroups, #group traits by color
             palette = 'colorblind',
             width = 15 * 1.4, # width of figure
             height = 16, # height of figure,
             border.width = 0.5,
             label.cex = 0.7, # scalar on label size
             label.color = 'black', # string on label colors
             label.prop = 0.9, 
             negDashed = T, #this aint workin
             loop = 0.7,
             edge.color = t(p25637$tvmgm[[1]][["pairwise"]][["edgecolor"]][, 1, tp]), 
             labels = colnames(as.data.frame(p25637$data)[3:17]), #variable names
             minimum = 0, #min value for edge to be shown
             maximum = .5, #max to scale edge weights
             threshold = 0.1,
             title.cex=2, #title size
             border.color = "grey60", edge.color = "grey60", 
             trans=1,fade=F,
             vTrans = 190, # transparency of the nodes to better determine edges crossing node areas
             details = F, shape = "ellipse", node.width=1, node.height=.6, # node appearance
             vsize = 13, #node size 
             asize = 4, #arrow head size
             edge.width=.6,
             label.font=15, 
             label.scale=F,
             legend = FALSE,
             title=paste("Estimation Point ", as.character(tp)),
             layoutOffset=c(0,0), 
             GLratio=3.5, 
             layoutScale=c(.8, .8))
  
}
?qgraph
```

Specific time poitns

```{r}
pdf("p25637 contemporaneous networks TP1.pdf")
plot(p25637mgmplots_pres[[1]])
dev.off()
```

```{r}
pdf("p25637 contemporaneous networks TP5.pdf")
plot(p25637mgmplots_pres[[5]])
dev.off()
```

```{r}
pdf("p25637 contemporaneous networks TP10.pdf")
plot(p25637mgmplots_pres[[10]])
dev.off()
```

GIF for one homie

```{r}
animation::saveGIF(
  for (i in 1:length(p25637mgmplots)){
  plot(p25637mgmplots[[i]])
},
movie.name = "p25637 network gif.gif",
interval = 0.75, ani.width = 1500, ani.height = 1500,
ani.res = 200)

```

PARAMETER PLOTS

```{r}
x <- as.vector(par_ests)
range(x)
parm_sds <- apply(par_ests, 1:2, sd) #15x15 matrix of sds
parm_sds_mat <- matrix(NA, 15^2, 3) #15 variables; 3 cols = variable on variable and estimate
counter <- 1
for(i in 1:15) {
  for(j in 1:15) {
    parm_sds_mat[counter, ] <- c(i, j, parm_sds[i, j]) 
    counter <- counter + 1
  }
}

#parameters with highest SDs
parm_sds_mat_ord <- parm_sds_mat[order(parm_sds_mat[, 3], decreasing = TRUE), ]
head(parm_sds_mat_ord) # six highest SDs
colnames(as.data.frame(p25637$data)[2:16])
#Depression EmotionalVol
#Trust Compassion
#Assertive Respect
```

```{r}
pdf("p25637 parameters line.pdf")

# 5) Line-plots + CIs
plot.new()
par(mar = c(4,4,0,1))
plot.window(xlim=c(1, 10), ylim=c(0, .5))
axis(1, c(1, 4, 7, 10), labels=T)
axis(2, c(0, .15, .3, .45), las=2)
abline(h = 0, col = "grey", lty=2)
title(xlab = "Estimation points", cex.lab = 1.2)
title(ylab = "Parameter estimate", cex.lab = 1.2)

head(parm_sds_mat_ord) # pick three highest
m_par_display <- matrix(c(10, 12, 
                          4, 6, 
                          3, 5), ncol = 2, byrow = T)
cols <- brewer.pal(5, "Set1")[c(2,4,5)] # avoid red/green because used for edges in upper panel

for(i in 1:nrow(m_par_display)) {
  
  par_row <- m_par_display[i, ]
  
  ## Plot point estimates
  P1_pointest <- par_ests[par_row[1], par_row[2], ]
  lines(1:10, P1_pointest, col = cols[i], lwd = 2, lty=i)
  
  ## Plot uncertainty estimates [new shading]
  # Compute CIs
  CIs <- apply(p25637_res$bootParameters[par_row[1], par_row[2], , ], 1, function(x) {
    quantile(x, probs = c(.05, .95))
  } )
  
  # Plot shading
  polygon(x = c(1:10, 10:1), y = c(CIs[1,], rev(CIs[2,])), col=alpha(colour = cols[i], alpha = .3), border=FALSE)
  } 

# Legend
legend_labels <- c(expression("Depression"["t-1"] %->% "EmotionalVol"["t"]),
                   expression("Trust"["t-1"] %->% "Compassion"["t"]),
                   expression("Assertive"["t-1"] %->% "Respect"["t"]))

legend(0.1, .49, 
       legend_labels,
       col = cols, 
       lwd = 2, bty = "n", cex = .75, horiz=T, lty=1:3)
 dev.off()
```
