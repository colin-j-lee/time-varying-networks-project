---
title: "6_2. BW Corr Figures"
format: html
editor: visual
---

```{r, load packages and wd, include = FALSE}
library(brms)
library(plyr)
library(psych)
library(broom.mixed)
library(ggdist)
library(furrr)
library(effectsize)
library(kableExtra)
library(tidyverse)

set.seed(420)

wd <- getwd()
setwd(wd)
```

Load Data

```{r}
load(sprintf("%s/Data/bw_corr_standardized.RData", wd)) #standardized, unnested
```

```{r}
# Define parameter names for correct ordering
parameter_names <- c("East Asian\n rel. to White", "Other Race\n rel. to White", "Female\n rel. to Male", "Non-Binary\n rel. to Male", "Other Gender\n rel. to Male", "Extraversion",
                     "Agreeableness", "Conscientiousness", "Neuroticism", "Openness", "CES-D",
                     "SWL", "ERQ_Reappraisal", "ERQ_Suppression","Duty_SD", "Duty_MSSD", "Intellect_SD", 
                     "Intellect_MSSD", "Adversity_SD", "Adversity_MSSD", "Mating_SD", 
                     "Mating_MSSD", "pOsitivity_SD", "pOsitivity_MSSD", "Negativity_SD",
                     "Negativity_MSSD", "Deception_SD", "Deception_MSSD", "Sociality_SD",
                     "Sociality_MSSD")

# Assign parameter names for plotting 
bw_corr_standardized$Parameter <- factor(parameter_names, levels = rev(parameter_names))

# Define predictor categories with proper spacing
predictor_categories <- rep(c(rep("Race", 2), 
                              rep("Gender", 3), 
                              rep("Baseline", 9), 
                              rep("DIAMONDS", 16)), 2)

#make df
bw_corr_plot_df <- tibble(
  model_type = rep(c("Lagged", "Contemporaneous"), each = nrow(bw_corr_standardized)),
  Parameter = rep(bw_corr_standardized$Parameter, 2),
  Models = c(bw_corr_standardized$lag_models, bw_corr_standardized$con_models),
  Std_Median = c(bw_corr_standardized$lag_corr_Std_Median, bw_corr_standardized$con_corr_Std_Median),
  CI_low = c(bw_corr_standardized$lag_corr_CI_low, bw_corr_standardized$con_corr_CI_low),
  CI_high = c(bw_corr_standardized$lag_corr_CI_high, bw_corr_standardized$con_corr_CI_high),
  predictor_categories = factor(predictor_categories, levels = c("Race", "Gender", "Baseline", "DIAMONDS")),
  overlaps_zero = CI_low <= 0 & CI_high >= 0) %>%
  mutate(
    model_type = ifelse(overlaps_zero == FALSE, paste0(model_type, "_bold"), model_type),
    model_type_legend = case_when(
    model_type %in% c("Contemporaneous", "Contemporaneous_bold") ~ "Contemporaneous",
    model_type %in% c("Lagged", "Lagged_bold") ~ "Lagged"
  ))
```

```{r}
# Color palette
ito_colors <- ggpubfigs::friendly_pal("ito_seven")

# Remove underscores while preserving factor levels
parameter_names_clean <- gsub("_", " ", parameter_names)
bw_corr_plot_df$Parameter <- factor(gsub("_", " ", as.character(bw_corr_plot_df$Parameter)), 
                                   levels = rev(parameter_names_clean))

#plot
bw_corr_plot <- ggplot(bw_corr_plot_df, 
       aes(y = Parameter, x = Std_Median, fill = model_type, color = model_type)) +
  
  # Point and interval plot
  geom_pointinterval(aes(xmin = CI_low, xmax = CI_high),
                     position = position_dodge(width = 0.5),
                     point_size = 2.5,
                     interval_size = 1.2) +
  
  geom_vline(xintercept = 0, linetype = "dashed", alpha = 0.5) +
  
  facet_grid(rows = vars(predictor_categories), 
             scales = "free_y", space = "free", switch = "y") + 
  
  # Define colors and legend
  scale_fill_manual(values = c("Contemporaneous" = "#bacddd", #from html generator
                               "Lagged" = "#eab394", 
                               "Contemporaneous_bold" = ito_colors[1], 
                               "Lagged_bold" = ito_colors[2]),
                    breaks = c("Contemporaneous", "Lagged"),
                    guide = guide_legend(override.aes = list(fill = c(ito_colors[1], ito_colors[2]),
                                         color = c(ito_colors[1], ito_colors[2])))

                    )+
  
  scale_color_manual(values = c("Contemporaneous" = "#bacddd", 
                                "Lagged" = "#eab394", 
                                "Contemporaneous_bold" = ito_colors[1], 
                                "Lagged_bold" = ito_colors[2]),
                     breaks = c("Contemporaneous", "Lagged"),
                     guide = guide_legend(override.aes = list(fill = c(ito_colors[1], ito_colors[2]),
                                         color = c(ito_colors[1], ito_colors[2])))
                     ) +
  labs(
    x = "Standardized Effect Size",
    y = NULL,
    color = "Model Type",
    fill = "Model Type",
    title = "Standardized Estimates with 95% Credible Intervals \n Between Bandwidth and Predictors"
  ) +
  theme_minimal() +
  theme(
    axis.text.y = element_text(hjust = 1),
    strip.text.y = element_text(size = 12, face = "bold"), # Bold facet labels
    plot.title = element_text(hjust = .8, face = "bold"), 
    plot.title.position = "plot",
    axis.title.x = element_text(hjust = .32),  
    legend.title = element_blank(),
    legend.position = c(.78, .67),
    legend.background = element_blank(),
    legend.key = element_blank(),
    legend.text = element_text(size = 12),
    
    # Add gray border around each facet panel
    panel.border = element_rect(color = "gray70", fill = NA, linewidth = 0.75),
    axis.line.y = element_line(color = "gray50", linewidth = 0.6),
    axis.ticks.y = element_line(color = "gray50", linewidth = 0.6)
  )

ggsave(bw_corr_plot, filename = "Manuscript Tables and Figures/Bandwidth Correlation Figure.png", width = 7, height = 12, bg = "white")

bw_corr_plot
```

Table

```{r}
bw_corr_standardized_df <- bw_corr_standardized %>% 
  select(Parameter:con_corr_CI_high) %>%
  select(-lag_corr_CI, -con_corr_CI) %>%
  mutate_if(is.numeric, ~round(.,2)) %>%
  mutate(lag = paste0(lag_corr_Std_Median, " [", lag_corr_CI_low, ", ", lag_corr_CI_high, "]"),
         con = paste0(con_corr_Std_Median, " [", con_corr_CI_low, ", ", con_corr_CI_high, "]")) %>%
  select(Parameter, lag, con)
#remove relative to 
bw_corr_standardized_df$Parameter <- parameter_names <- c("East Asian", "Other Race", "Female", "Non-Binary", "Other Gender", "Extraversion",
                     "Agreeableness", "Conscientiousness", "Neuroticism", "Openness", "CES-D",
                     "SWL", "ERQ_Reappraisal", "ERQ_Suppression","Duty_SD", "Duty_MSSD", "Intellect_SD", 
                     "Intellect_MSSD", "Adversity_SD", "Adversity_MSSD", "Mating_SD", 
                     "Mating_MSSD", "pOsitivity_SD", "pOsitivity_MSSD", "Negativity_SD",
                     "Negativity_MSSD", "Deception_SD", "Deception_MSSD", "Sociality_SD",
                     "Sociality_MSSD")

# Assign parameter names for plotting 
bw_corr_standardized_df$Parameter <- factor(parameter_names, levels = rev(parameter_names))

#remove underscores
bw_corr_standardized_df$Parameter <- gsub("_", " ", bw_corr_standardized_df$Parameter)

#add bolding
bw_corr_standardized_df <- bw_corr_standardized_df %>%
  mutate(across(lag:con, ~ ifelse(as.numeric(str_extract(.x, "(?<=\\[)-?\\d+\\.?\\d*")) > 0 | 
                                   as.numeric(str_extract(.x, "(?<=, )-?\\d+\\.?\\d*")) < 0, 
                                   paste0("<strong>", .x, "</strong>"), .x))) %>% 
  select(Parameter, con, lag) #con first
 

# Create the table
kable(bw_corr_standardized_df, format = "html", digits = 2,
      escape = F, align = c("r", rep("c", 2)),
      col.names = c("Predictor", "Contemp. Med. (95% CI)", "Lagged Med. (95% CI)"),
      caption = "<strong> Table 5  </strong><br><em> Bivariate Estimates Between Bandwidth and Predictors Across All Studies <em>") %>%
    kable_classic(full_width = F, html_font = "Times") %>%
    pack_rows("Race/Ethnicity", 1, 2) %>%
    pack_rows("Gender", 3, 5) %>%
    pack_rows("Baseline", 6, 14) %>%
    pack_rows("DIAMONDS", 15, nrow(bw_corr_standardized_df)) %>%
  save_kable(file = "Manuscript Tables and Figures/Bandwidth Correlations.html")

```

## EVERYTHING BELOW UNNECESSARY (FOR NOW 2/21/25)

Suppl; include study

```{r}
bw_corr_standardized_df <- bw_corr_nested %>% 
  select(predictors, lag_corr, con_corr)%>% unnest() %>%
  select(predictors, Parameter, Std_Median, CI_low, #relevant cols
         CI_high, Std_Median1, CI_low1, CI_high1) %>%
  mutate_if(is.numeric, ~round(.,2)) %>%
  mutate(Parameter = gsub("b_race_ethnicity|b_gender", "", Parameter),
         Parameter = gsub("b_", "", Parameter),
         Parameter = ifelse(Parameter == "study1", "PPS + CPE", Parameter),
         Parameter = ifelse(Parameter == "study2", "Soc-Cog", Parameter),
         Parameter = ifelse(Parameter == "studyPPS_CPE", "PPS + CPE", Parameter),
         Parameter = ifelse(Parameter == "AmericanIndian", "American Indian", Parameter),
         Parameter = ifelse(Parameter == "EastAsian", "East Asian", Parameter),
         Parameter = ifelse(Parameter == "SouthAsian", "South Asian", Parameter),
         Parameter = ifelse(Parameter == "NonMBinary", "Non-Binary", Parameter),
         lag = paste0(Std_Median, " [", CI_low, ", ", CI_high, "]"),
         con = paste0(Std_Median1, " [", CI_low1, ", ", CI_high1, "]")) %>% 
  filter(Parameter != "Intercept",
         Parameter != "sigma") %>%
  select(Parameter, lag, con)
 

# Create the table
kable(bw_corr_standardized_df, format = "html", digits = 2,
      escape = F, align = c("r", rep("c", 2)),
      col.names = c("Predictor", "Lagged Med. (95% CI)", "Contemp. Med. (95% CI)"),
      caption = "<strong> Table 5  </strong><br><em> Bivariate Estimates Between Bandwidth and Predictors and Studies Across All Samples <em>") %>%
    kable_classic(full_width = F, html_font = "Times") %>%
    pack_rows("Race/Ethnicity", 1, 9) %>%
    pack_rows("Gender", 10, 14) %>%
    pack_rows("Baseline", 15, 38) %>%
    pack_rows("DIAMONDS", 39, nrow(bw_corr_df)) %>%
  save_kable(file = "Tables/Analyses/Bandwidth Correlations Including Study.html")
```

Suppl. Extract beta coefficient and table

```{r, warning = FALSE}
#remove terms and integrate demographics into predictors column
demo_terms <- c("Black", "American Indian", "East Asian", "Other_race", "South Asian"   , "Mixed", "Hispanic", "Female", "Non-Binary", "Other_gender")

#tidy
bw_coefs_df <- bw_models_df %>%
  mutate(tidy_lag_params = map(lag_models, tidy),
         tidy_lag_params = map(tidy_lag_params, 
                               list(. %>% dplyr::select(effect, term:conf.high))),
         tidy_con_params = map(con_models, function(x) tidy(x, conf.level = 0.89)),
         tidy_con_params = map(tidy_con_params, 
                               list(. %>% dplyr::select(effect, term:conf.high)))
  )

bw_coefs_df <- bw_coefs_df %>% 
  select(predictors, tidy_lag_params, tidy_con_params)%>% unnest() %>%
  mutate(overlap = data.table::between(0, conf.low, conf.high),
         overlap = ifelse(overlap == TRUE, "Yes", "No"),
         term = gsub("race_ethnicity|gender", "", term),
         term = gsub("_", "", term),
         predictors = gsub("composite", "comp", predictors)) %>% 
  filter(term != "(Intercept)",
         term != "sdObservation") %>% #idk if i should cut this but for rn
  select(-effect, -term, -std.error)

#replace names
bw_coefs_df[1:10,1] <- demo_terms
bw_coefs_df <- bw_coefs_df %>%
  rename(Predictors = predictors,
         Estimate = estimate,
         Cred.low = conf.low,
         Cred.high = conf.high,
         Overlap = overlap)
  
# Create the table
kable(bw_coefs_df, format = "html", digits = 2,
      escape = F, align = c("r", rep("c", 5)),
        caption = "<strong> Table 5  </strong><br><em> Bivariate Estimates Between Bandwidth and Predictors Across All Samples <em>") %>%
    kable_classic(full_width = F, html_font = "Times") %>%
    pack_rows("Demographics", 1, 10) %>%
    pack_rows("Baseline", 11, 19) %>%
    pack_rows("DIAMONDS", 20, nrow(bw_coefs_df)) %>%
  save_kable(file = "Tables/Analyses/Bandwidth Correlations.html")

save()

```

MISC: Multiple regression version

```{r}
mv_bw_mod <- brm(
  formula = as.formula(bandwidth ~ .),
    data = baseline_corr %>%
    select(-SID, -study),
    family = gaussian(),  # Adjust if needed
    prior = set_prior("normal(0,1)", class = "b"),
    chains = 4, iter = 2000
  )

summary(mv_bw_mod)
```
