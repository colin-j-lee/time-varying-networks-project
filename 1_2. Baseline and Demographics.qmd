---
title: "1_2. Baseline and Demographics"
format: html
editor: visual
---

```{r, include = FALSE}
library(psych)
library(forcats)
library(broom)
library(knitr)
library(kableExtra)
library(plyr)
library(stringr)
library(tidyverse)

wd <- getwd()
setwd(wd)
```

```{r, include = FALSE}
#ids pre and post 50 obs cut
load(sprintf("%s/Data/ipcs_ids_pre.RData", wd))
load(sprintf("%s/Data/ipcs_ids_post.RData", wd))
load(sprintf("%s/Data/pp_ids_pre.RData", wd))
load(sprintf("%s/Data/pp_ids_post.RData", wd))
load(sprintf("%s/Data/cpe_ids_pre.RData", wd))
load(sprintf("%s/Data/cpe_ids_post.RData", wd))
load(sprintf("%s/Data/cog_ids_pre.RData", wd))
load(sprintf("%s/Data/cog_ids_post.RData", wd))

# esm data 
load(sprintf("%s/Data/tvn_wide.RData", wd)) 

# substitute IDs
ipcs_subs <- read_csv("Raw Data/ipcs_subs.csv") %>%
  mutate(old = as.numeric(old),
         new = as.numeric(new))

pp_subs <- read_csv("Raw Data/pps_subs.csv") 

#additional baseline names
fuck <- c("BFI", "CESD", "ERQ", "SWL")
```

function i use for combining columns while handling NAs

```{r}
combine_columns <- function(...) {
  values <- c(...)
  values <- values[!is.na(values) & values != ""]  # Remove NA and empty values
  paste(values, collapse = ", ")  # Concatenate remaining values
}
```

IPCS baseline data

The warning is changing "emorie" to SID

```{r, warning = FALSE}
ipcs_baseline <- read_csv("Raw Data/ipcs_baseline_05.07.20_corrected.csv",
                          show_col_types = FALSE) %>%
  filter(!row_number() %in% 1:2) %>%
  mutate(SID = as.numeric(SID),
         SID = mapvalues(SID, from = ipcs_subs$old, to = ipcs_subs$new, warn_missing = F),
         study = "IPCS",
         YOB = as.numeric(YOB),
         race = as.numeric(race),
         ethnicity = as.numeric(ethnicity),
         gender = as.numeric(gender),
         across(contains(fuck), as.numeric)) %>% #baseline variables like BFI
  filter(SID %in% ipcs_ids_pre) %>% #keep participants who did ESM
  rename(race_TEXT = race_6_TEXT,
         gender_TEXT = gender_3_TEXT) %>% 
  rowwise() %>%
  mutate( #now its time to combine demographic cols
    race_ethnicity = combine_columns(race, race_TEXT, ethnicity),
    gender = combine_columns(gender, gender_TEXT)
  ) %>%
  ungroup() %>%
  mutate( #6 is Other; 9 is Hispanic; 8 is mixed
    race_ethnicity = if_else(str_detect(race_ethnicity, "Jewish"), "6", race_ethnicity),
    race_ethnicity = if_else(str_detect(race_ethnicity, "Middle Eastern"), "6", race_ethnicity),
    race_ethnicity = if_else(str_detect(race_ethnicity, "Hispanic"), "9", race_ethnicity),
    race_ethnicity = if_else(str_count(race_ethnicity, ",") > 0, "8", race_ethnicity),
    race_ethnicity = factor(race_ethnicity, 1:9, c("White", "Black", "American Indian", "East Asian", "Pacific Islander", "Other_race", "South Asian", "Mixed", "Hispanic"))) %>%
  select(SID, YOB, StartDate, race_ethnicity, gender,
         contains("BFI"),
         contains("CESD"),
         contains("ERQ"),
         contains("SWL"),
         study) %>%
  arrange(SID) %>%
  mutate(gender=as.numeric(gender),
    year = year(mdy_hm(StartDate))
  ) %>%
  select(-StartDate) %>%
  mutate(gender = factor(gender, 1:5, c("Male", "Female", "Non-Binary", "Other_gender", "Prefer Not To Say"))
  ) %>% 
  select(SID, YOB, race_ethnicity, gender, study, year, everything())

fuckyou <- colnames(ipcs_baseline)

str(ipcs_baseline)
```

PPS baseline

```{r, warning = FALSE}
pp_baseline <- read_csv("Raw Data/pps_baseline_2023-02-27.csv",
                          show_col_types = FALSE) %>%
  filter(!row_number() %in% 1:2) %>%
  rename(SID = id) %>%
  mutate(SID = mapvalues(SID, from = pp_subs$old, to = pp_subs$new, warn_missing = F),
         SID = as.numeric(SID),
         study = "PPS",
         YOB = as.numeric(YOB),
         race = as.numeric(race),
         ethnicity = as.numeric(ethnicity),
         gender = as.numeric(gender),
         across(contains(fuck), as.numeric))  %>%
  filter(SID %in% pp_ids_pre) %>%
  filter(!is.na(BFI_E_3)) %>%
  rename(race_TEXT = race_6_TEXT,
         gender_TEXT = gender_3_TEXT) %>% #now its time to combine demographic cols
  rowwise() %>%
  mutate(
    race_ethnicity = combine_columns(race, race_TEXT, ethnicity),
    gender = combine_columns(gender, gender_TEXT)
  ) %>%
  ungroup() %>%
  mutate(
    race_ethnicity = if_else(str_detect(race_ethnicity, "Jewish"), "6", race_ethnicity),
    race_ethnicity = if_else(str_detect(race_ethnicity, "Middle Eastern"), "6", race_ethnicity),
    race_ethnicity = if_else(str_detect(race_ethnicity, "Hispanic"), "9", race_ethnicity),
    race_ethnicity = if_else(str_count(race_ethnicity, ",") > 0, "8", race_ethnicity),
    race_ethnicity = factor(race_ethnicity, 1:9, c("White", "Black", "American Indian", "East Asian", "Pacific Islander", "Other_race", "South Asian", "Mixed", "Hispanic"))
  )  %>%
  select(SID, YOB, StartDate, race_ethnicity, gender,
         contains("BFI"),
         contains("CESD"),
         contains("ERQ"),
         contains("SWL"),
         study) %>%
  arrange(SID) %>%
  mutate(gender=as.numeric(gender),
    year = year(mdy_hm(StartDate))
  ) %>%
  select(-StartDate)%>%
  mutate(gender = factor(gender, 1:5, c("Male", "Female", "Non-Binary", "Other_gender", "Prefer Not To Say"))
  ) %>%
  select(SID, YOB, race_ethnicity, gender, study, year, everything())

colnames(pp_baseline) <- fuckyou

str(pp_baseline)

```

CPE

```{r}
cpe_baseline <- read_csv("Raw Data/cpe_baseline-2025-01-28.csv",
                          show_col_types = FALSE) 

cpe_baseline$YOB[131] <- 2005 #someone put their entire birthday lol
cpe_baseline$YOB[186] <- 2006 #someone put their entire birthday lol

cpe_baseline <- cpe_baseline %>%
  mutate(study = "CPE",
         YOB = as.numeric(YOB),
         race = as.numeric(race),
         ethnicity = as.numeric(ethnicity),
         gender = as.numeric(gender),
         across(contains(fuck), as.numeric)) %>%
  filter(SID %in% cpe_ids_pre) %>%
  select(-sample) %>% #emorie sent the df with the relevant variables; below is just to order cols%>%
  rename(race_TEXT = race_6_TEXT) %>% #now its time to combine demographic cols
  rowwise() %>%
  mutate(
    race_ethnicity = combine_columns(race, race_TEXT, ethnicity),
    gender = combine_columns(gender, gender_TEXT)
  ) %>%
  ungroup() %>%
  mutate(
    race_ethnicity = if_else(str_detect(race_ethnicity, "Jewish"), "6", race_ethnicity),
    race_ethnicity = if_else(str_detect(race_ethnicity, "Middle Eastern"), "6", race_ethnicity),
    race_ethnicity = if_else(
      str_detect(str_to_lower(race_ethnicity), "mexican|hispanic|latino|latina"), 
      "9", 
      race_ethnicity),
    race_ethnicity = if_else(str_detect(race_ethnicity, "\\d{2,}"), "8", race_ethnicity),
    race_ethnicity = if_else(str_count(race_ethnicity, ",") > 0, "8", race_ethnicity),
    race_ethnicity = factor(race_ethnicity, 1:9, c("White", "Black", "American Indian", "East Asian", "Pacific Islander", "Other_race", "South Asian", "Mixed", "Hispanic"))
    ) %>%
  select(SID, YOB, StartDate, race_ethnicity, gender,
         contains("BFI"),
         contains("CESD"),
         contains("ERQ"),
         contains("SWL"),
         study) %>%
  arrange(SID) %>%
  mutate(
    gender = sub(",.*", "", gender),
    gender=as.numeric(gender),
    year = year(mdy_hm(StartDate))
  ) %>%
  select(-StartDate) %>%
  mutate(gender = factor(gender, c(1,2,8,5,9), c("Male", "Female", "Non-Binary", "Other_gender", "Other_gender"))) %>% 
  select(SID, YOB, race_ethnicity, gender, study, year, everything())


colnames(cpe_baseline) <- fuckyou
```

Cog

```{r}
#race/ethn cols are:
# 1. american indian
# 2. asian
# 3. black
# 4. pacific islander
# 5. white
# 6. not sure
# 7. prefer not to say
#ill be marking 6 and 7 as NAs

cog_baseline <- read_csv("Raw Data/cog_baseline_data_2025-02-06.csv",
                          show_col_types = FALSE) %>%
  mutate(race_ethnicity = pmap_chr(select(.,
                                     demo_ethnicity_1,
                                     demo_ethnicity_2,
                                     demo_ethnicity_3,
                                     demo_ethnicity_4,
                                     demo_ethnicity_5,
                                     demo_ethnicity_6,
                                     demo_ethnicity_7,), 
    ~ paste(c("3", "4", "2", "5", "1", "6", "6")[!is.na(c(...))], collapse = ", ") #ethnicity mapping; make it match other baselines
  )) %>%
  mutate(race_ethnicity = na_if(race_ethnicity, ""),
         race_ethnicity = if_else(str_count(race_ethnicity, ",") > 0, "8", race_ethnicity),
    race_ethnicity = factor(race_ethnicity, 1:9, c("White", "Black", "American Indian", "East Asian", "Pacific Islander", "Other_race", "South Asian", "Mixed", "Hispanic")),
          year = year(ymd_hms(date)) 
        )


#now filter ids and select relevant columns
cog_baseline <- cog_baseline %>%
  filter(SID %in% cog_ids_pre) %>% #emorie sent the df with the relevant variables; only BFI and SWL, no ERQ or CES-D
  mutate(CESD01 = NA, #there was a better way, but just to make cols even to slap em all together
         CESD02 = NA,
         CESD03 = NA,
         CESD04 = NA,
         CESD05 = NA,
         CESD06 = NA,
         CESD07 = NA,
         CESD08 = NA,
         CESD09 = NA,
         CESD010 = NA,
         CESD011 = NA,
         CESD012 = NA,
         CESD013 = NA,
         CESD014 = NA,
         CESD015 = NA,
         CESD016 = NA,
         CESD017 = NA,
         CESD018 = NA,
         CESD019 = NA,
         CESD020 = NA,
         ERQ_R_1 = NA, 
         ERQ_S_1 = NA,
         ERQ_R_2 = NA,
         ERQ_S_2 = NA,
         ERQ_R_3 = NA,
         ERQ_S_3 = NA,
         ERQ_R_4 = NA,
         ERQ_R_5 = NA,
         ERQ_S_4 = NA,
         ERQ_R_6 = NA,
         race_6_TEXT = NA, 
         race = NA
         ) %>%
  mutate(study = "Soc-Cog",
         demo_YOB = as.numeric(demo_YOB),
         across(contains(fuck), as.numeric)) %>%
  select(SID, demo_YOB, date, race_ethnicity, demo_gender,
         contains("BFI"),
         contains("CESD"),
         contains("ERQ"),
         contains("SWL"),
         study) %>%
  arrange(SID) %>%
  mutate(
    gender = sub(",.*", "", demo_gender),
    demo_gender=as.numeric(demo_gender),
    year = year(ymd_hms(date))
  ) %>%
  mutate(gender = factor(gender, 0:4, labels = c("Male", "Female", "Non-Binary", "Other_gender", "Prefer Not To Say")))  %>%
  rename(YOB = demo_YOB) %>%
  select(-demo_gender,
         -date) %>% 
  select(SID, YOB, race_ethnicity, gender, study, year, everything())

colnames(cog_baseline) <- fuckyou
str(cog_baseline)
```

Combine

```{r}
tvn_separate_baseline <- bind_rows(ipcs_baseline,
                                   pp_baseline,
                                   cpe_baseline,
                                   cog_baseline) %>%
  mutate(age = year - YOB) %>%
  select(-year, -YOB) %>% 
  select(SID, age, race_ethnicity, gender, study, everything())

#merge pps and cpe
tvn_baseline <- tvn_separate_baseline %>%
  mutate(study = ifelse(study %in% c("PPS", "CPE"), "PPS_CPE", study))

```

Dataframe of participants with n\>50

```{r}
#vector of all post ids
all_ids <- c(pp_ids_post, ipcs_ids_post, cpe_ids_post, cog_ids_post)
tvn_baseline_post <- tvn_baseline %>%
  filter(SID %in% all_ids) %>%
  arrange(study, SID)
```

Post-cut df with relevant variables

```{r}
tvn_baseline_variables <- tvn_baseline_post %>%
  rowwise() %>%
  mutate(E_composite = mean(c_across(BFI_E_1:BFI_E_12), na.rm = TRUE),
         A_composite = mean(c_across(BFI_A_1:BFI_A_12), na.rm = TRUE),
         C_composite = mean(c_across(BFI_C_1:BFI_C_12), na.rm = TRUE),
         N_composite = mean(c_across(BFI_N_1:BFI_N_12), na.rm = TRUE),
         O_composite = mean(c_across(BFI_O_1:BFI_O_12), na.rm = TRUE),
         CESD_composite = mean(c_across(CESD_1:CESD_20), na.rm = TRUE),
         SWL_composite = mean(c_across(SWL_1:SWL_5), na.rm = TRUE),
         ER_R_composite = mean(c_across(c(ERQ_R_1,
                                     ERQ_R_2,
                                     ERQ_R_3, 
                                     ERQ_R_4,
                                     ERQ_R_5,
                                     ERQ_R_6)), na.rm = TRUE),
         ER_S_composite = mean(c_across(c(ERQ_S_1,
                                     ERQ_S_2,
                                     ERQ_S_3, 
                                     ERQ_S_4)), na.rm = TRUE)
         ) %>%
  group_by(SID) %>%
  summarise(across(everything(), ~ first(na.omit(.))), .groups = "drop") %>%
  ungroup() %>%
  select(SID, study, age, race_ethnicity, gender, contains("composite"))


#NaN to NA
tvn_baseline_variables[] <- lapply(tvn_baseline_variables, function(x) {
  if (is.numeric(x)) x[is.nan(x)] <- NA
  return(x)
})


save(tvn_baseline_variables, file = "Data/tvn_baseline_variables.RData")

```

Table demographics and baseline together for manuscript

```{r}
summary_table <- tvn_baseline_variables %>%
  group_by(study) %>%
  summarise(
    # Age
    `Age` = paste0(round(mean(age, na.rm = TRUE), 2), " (", round(sd(age, na.rm = TRUE), 2), ")"),
    
    # Race proportions
    `White` = paste0(round(mean(race_ethnicity == "White", na.rm = TRUE) * 100, 2), "%"),
    `Black` = paste0(round(mean(race_ethnicity == "Black", na.rm = TRUE) * 100, 2), "%"),
    `American Indian` = paste0(round(mean(race_ethnicity == "American Indian", na.rm = TRUE) * 100, 2), "%"),
    `East Asian` = paste0(round(mean(race_ethnicity == "East Asian", na.rm = TRUE) * 100, 2), "%"),
    `Pacific Islander` = paste0(round(mean(race_ethnicity == "Pacific Islander", na.rm = TRUE) * 100, 2), "%"),
    `Other Race` = paste0(round(mean(race_ethnicity == "Other_race", na.rm = TRUE) * 100, 2), "%"),
    `South Asian` = paste0(round(mean(race_ethnicity == "South Asian", na.rm = TRUE) * 100, 2), "%"),
    `Mixed` = paste0(round(mean(race_ethnicity == "Mixed", na.rm = TRUE) * 100, 2), "%"),
    `Hispanic` = paste0(round(mean(race_ethnicity == "Hispanic", na.rm = TRUE) * 100, 2), "%"),
    
    # Gender proportions
    `Female` = paste0(round(mean(gender == "Female", na.rm = TRUE) * 100, 2), "%"),
    `Male` = paste0(round(mean(gender == "Male", na.rm = TRUE) * 100, 2), "%"),
    `Other Gender` = paste0(round(mean(gender == "Other_gender", na.rm = TRUE) * 100, 2), "%"),
    `Non-Binary` = paste0(round(mean(gender == "Non-Binary", na.rm = TRUE) * 100, 2), "%"),

    
        # Big Five personality traits
    `Extraversion` = paste0(round(mean(E_composite, na.rm = TRUE), 2), " (", round(sd(E_composite, na.rm = TRUE), 2), ")"),
    `Agreeableness` = paste0(round(mean(A_composite, na.rm = TRUE), 2), " (", round(sd(A_composite, na.rm = TRUE), 2), ")"),
    `Conscientiousness` = paste0(round(mean(C_composite, na.rm = TRUE), 2), " (", round(sd(C_composite, na.rm = TRUE), 2), ")"),
    `Neuroticism` = paste0(round(mean(N_composite, na.rm = TRUE), 2), " (", round(sd(N_composite, na.rm = TRUE), 2), ")"),
    `Openness` = paste0(round(mean(O_composite, na.rm = TRUE), 2), " (", round(sd(O_composite, na.rm = TRUE), 2), ")"),
    
    # Other composite scores
    `CES-D` = paste0(round(mean(CESD_composite, na.rm = TRUE), 2), " (", round(sd(CESD_composite, na.rm = TRUE), 2), ")"),
    `SWL` = paste0(round(mean(SWL_composite, na.rm = TRUE), 2), " (", round(sd(SWL_composite, na.rm = TRUE), 2), ")"),
    `ERQ Reappraisal` = paste0(round(mean(ER_R_composite, na.rm = TRUE), 2), " (", round(sd(ER_R_composite, na.rm = TRUE), 2), ")"),
    `ERQ Suppression` = paste0(round(mean(ER_S_composite, na.rm = TRUE), 2), " (", round(sd(ER_S_composite, na.rm = TRUE), 2), ")"),

    
    # Sample size per study
    `Participants` = n() %>% as.character()
  ) %>%
  pivot_longer(-study, names_to = "Variable", values_to = "Value") %>%
  pivot_wider(names_from = study, values_from = Value) %>% # Convert to wide format with studies as columns 
  rename('PPS + CPE' = PPS_CPE)

#remove nan
summary_table[c(20, 22, 23),4] <- "-"

# Generate the table using kable
kable(summary_table,
      "html", 
      caption = "<strong>Table 1</strong><br><em>Descriptive Statistics of Demographic and Baseline Variables For Each Study</em>",
      align = c("r", rep("c", 3))) %>%
  pack_rows("Demographic Measures", 1, 14, indent = TRUE) %>%
  pack_rows("Baseline Measures", 15, 23, indent = TRUE) %>%
  pack_rows("Sample Sizes", 24, 24, indent = TRUE) %>%
  kable_classic(full_width = FALSE, 
                html_font = "Times") %>%
  save_kable(file = "Manuscript Tables and Figures/Demographics and Baseline Manuscript Table.html")

table(summary_table$study)
```

Busier version with mean(sd) and such

```{r, eval = FALSE}
summary_table <- tvn_baseline_variables %>%
  group_by(study) %>%
  summarise(
    # Age
    `Age (Mean (SD))` = paste0(round(mean(age, na.rm = TRUE), 2), " (", round(sd(age, na.rm = TRUE), 2), ")"),
    
      # Race proportions
    `White` = paste0(round(mean(race_ethnicity == "White", na.rm = TRUE) * 100, 2), "%"),
    `Black` = paste0(round(mean(race_ethnicity == "Black", na.rm = TRUE) * 100, 2), "%"),
    `American Indian` = paste0(round(mean(race_ethnicity == "American Indian", na.rm = TRUE) * 100, 2), "%"),
    `East Asian` = paste0(round(mean(race_ethnicity == "East Asian", na.rm = TRUE) * 100, 2), "%"),
    `Pacific Islander` = paste0(round(mean(race_ethnicity == "Pacific Islander", na.rm = TRUE) * 100, 2), "%"),
    `Other race` = paste0(round(mean(race_ethnicity == "Other_race", na.rm = TRUE) * 100, 2), "%"),
    `South Asian` = paste0(round(mean(race_ethnicity == "South Asian", na.rm = TRUE) * 100, 2), "%"),
    `Mixed` = paste0(round(mean(race_ethnicity == "Mixed", na.rm = TRUE) * 100, 2), "%"),
    `Hispanic` = paste0(round(mean(race_ethnicity == "Hispanic", na.rm = TRUE) * 100, 2), "%"),
    
    # Gender proportions
    `Female` = paste0(round(mean(gender == "Female", na.rm = TRUE) * 100, 2), "%"),
    `Male` = paste0(round(mean(gender == "Male", na.rm = TRUE) * 100, 2), "%"),
    `Gender_other` = paste0(round(mean(gender == "Gender_other", na.rm = TRUE) * 100, 2), "%"),
    `Non_binary` = paste0(round(mean(gender == "Non_binary", na.rm = TRUE) * 100, 2), "%"),
    
        # Big Five personality traits
    `E (Mean (SD))` = paste0(round(mean(E_composite, na.rm = TRUE), 2), " (", round(sd(E_composite, na.rm = TRUE), 2), ")"),
    `A (Mean (SD))` = paste0(round(mean(A_composite, na.rm = TRUE), 2), " (", round(sd(A_composite, na.rm = TRUE), 2), ")"),
    `C (Mean (SD))` = paste0(round(mean(C_composite, na.rm = TRUE), 2), " (", round(sd(C_composite, na.rm = TRUE), 2), ")"),
    `N (Mean (SD))` = paste0(round(mean(N_composite, na.rm = TRUE), 2), " (", round(sd(N_composite, na.rm = TRUE), 2), ")"),
    `O (Mean (SD))` = paste0(round(mean(O_composite, na.rm = TRUE), 2), " (", round(sd(O_composite, na.rm = TRUE), 2), ")"),
    
    # Other composite scores
    `CESD (Mean (SD))` = paste0(round(mean(CESD_composite, na.rm = TRUE), 2), " (", round(sd(CESD_composite, na.rm = TRUE), 2), ")"),
    `SWL (Mean (SD))` = paste0(round(mean(SWL_composite, na.rm = TRUE), 2), " (", round(sd(SWL_composite, na.rm = TRUE), 2), ")"),
    `ER_R (Mean (SD))` = paste0(round(mean(ER_R_composite, na.rm = TRUE), 2), " (", round(sd(ER_R_composite, na.rm = TRUE), 2), ")"),
    `ER_S (Mean (SD))` = paste0(round(mean(ER_S_composite, na.rm = TRUE), 2), " (", round(sd(ER_S_composite, na.rm = TRUE), 2), ")"),

    
    # Sample size per study
    `N` = n() %>% as.character()
  ) %>%
  pivot_longer(-study, names_to = "Variable", values_to = "Value") %>%
  pivot_wider(names_from = study, values_from = Value) # Convert to wide format with studies as columns

#remove nan
# summary_table'NaN (NA)'


# Generate the table using kable
kable(summary_table,
      "html", 
      caption = "<strong>Table 1</strong><br><em>Descriptive Statistics of Demographic and Baseline Variables Across Studies</em>",
      align = c("r", rep("c", 3))) %>%
  kable_styling(full_width = FALSE, 
                html_font = "Times",
                bootstrap_options = c("striped", "hover", "condensed", "responsive")) %>%
  save_kable(file = "Tables/Demographics/Demographics and Baseline Manuscript Table.html")
```

Demographics (gender, age, race) for ALL Participants

```{r}
demographics_pre_table <- tvn_baseline %>% 
  group_by(study) %>%
  summarize(age = sprintf("%.2f (SD = %.2f)", mean(age, na.rm = T), sd(age, na.rm = T)),
            female = sprintf("%i (%.2f%%)"
                            , sum(gender == "Female", na.rm = T)
                            , sum(gender == "Female", na.rm = T)/n()*100),
            male = sprintf("%i (%.2f%%)"
                            , sum(gender == "Male", na.rm = T)
                            , sum(gender == "Male", na.rm = T)/n()*100),
            other_gender = sprintf("%i (%.2f%%)"
                            , sum(gender == "Other_gender", na.rm = T)
                            , sum(gender == "Other_gender", na.rm = T)/n()*100),
            non_binary = sprintf("%i (%.2f%%)"
                            , sum(gender == "Non-Binary", na.rm = T)
                            , sum(gender == "Non-Binary", na.rm = T)/n()*100),
            white = sprintf("%i (%.2f%%)"
                            , sum(race_ethnicity == "White", na.rm = T)
                            , sum(race_ethnicity == "White", na.rm = T)/n()*100),
            black = sprintf("%i (%.2f%%)"
                            , sum(race_ethnicity == "Black", na.rm = T)
                            , sum(race_ethnicity == "Black", na.rm = T)/n()*100),
            american_indian = sprintf("%i (%.2f%%)"
                            , sum(race_ethnicity == "American Indian", na.rm = T)
                            , sum(race_ethnicity == "American Indian", na.rm = T)/n()*100),
            east_asian = sprintf("%i (%.2f%%)"
                            , sum(race_ethnicity == "East Asian", na.rm = T)
                            , sum(race_ethnicity == "East Asian", na.rm = T)/n()*100),
            pac_island = sprintf("%i (%.2f%%)"
                            , sum(race_ethnicity == "Pacific Islander", na.rm = T)
                            , sum(race_ethnicity == "Pacific Islander", na.rm = T)/n()*100),
            south_asian = sprintf("%i (%.2f%%)"
                            , sum(race_ethnicity == "South Asian", na.rm = T)
                            , sum(race_ethnicity == "South Asian", na.rm = T)/n()*100),
            hispanic = sprintf("%i (%.2f%%)"
                            , sum(race_ethnicity == "Hispanic", na.rm = T)
                            , sum(race_ethnicity == "Hispanic", na.rm = T)/n()*100),
            mixed = sprintf("%i (%.2f%%)"
                            , sum(race_ethnicity == "Mixed", na.rm = T)
                            , sum(race_ethnicity == "Mixed", na.rm = T)/n()*100),
            other_race = sprintf("%i (%.2f%%)"
                            , sum(race_ethnicity == "Other_race", na.rm = T)
                            , sum(race_ethnicity == "Other_race", na.rm = T)/n()*100))

colnames(demographics_pre_table) <- c("study", "Age", "Female", "Male", "Gender_other", "Non_binary", "White", "Black", "American Indian", "East Asian",
                        "Pac Islander", "South Asian",
                        "Hispanic", "Mixed", "Other_race")
demo_pre_long <- demographics_pre_table %>%
  pivot_longer(cols = -study)

#suppl long
kable(demo_pre_long %>% select(-study), "html",
      col.names = c("Sample Characteristic", "Value"), align = c("l", "c"),
      caption = "<strong>Table S1</strong><br><em>Descriptive Statistics of Pre-Cut Participants at Baseline<em>") %>%
  kable_styling(full_width = F) %>%
  pack_rows("IPCS", 1, 14, indent = TRUE) %>%
  pack_rows("PPS + CPE", 15, 28, indent = TRUE) %>%
  pack_rows("Soc-Cog", 29, 42, indent = TRUE)  %>%
  save_kable(file = "Tables/Demographics/Pre-Cut Long Demographics Table.html")


#suppl table wide
# demographics_pre_table %>%
#   kable(., "html"
#         , col.names = c("Age", "Female", "Male", "Other_gender",
#                         "Non-Binary", "White", "Black",
#                         "American Indian", "East Asian",
#                         "Pac Islander", "South Asian",
#                         "Hispanic", "Mixed", "Other_race")
#         , align = rep("c", 15)
#         , caption = "<strong>Table S1</strong><br><em>Descriptive Statistics of Pre-Cut Participants at Baseline<em>") %>%
#   kable_styling(full_width = F) %>%
#   save_kable(file = "Tables/Demographics/Pre-Cut Wide Demographics Table.html")
```

Participant-Level Table Demographics

```{r}
tvn_baseline  %>%
  select(SID, (race_ethnicity), gender, age, study) %>%
  kable(., "html"
        , col.names = c("ID", "Race/Ethnicity", "Gender", "Age", "Study")
        , align = rep("c", 5)
        , caption = "<strong>Table S2</strong><br><em>Descriptive Statistics of Pre-Cut Participants at Baseline<em>") %>%
  kable_styling(full_width = F) %>%
  save_kable(file = "Tables/Demographics/Participant Level Pre-Cut Demographics Table.html")
```

Participant-Level Table Demographics

```{r}
tvn_baseline_post %>%
  select(SID, (race_ethnicity), gender, age) %>%
  kable(., "html"
        , col.names = c("ID", "Race/Ethnicity", "Gender", "Age")
        , align = rep("c", 4)
        , caption = "<strong>Table S4</strong><br><em>Descriptive Statistics of Post-Cut Participants at Baseline<em>") %>%
  kable_styling(full_width = F) %>%
  save_kable(file = "Tables/Demographics/Participant Level Post-Cut Demographics Table.html")
```
