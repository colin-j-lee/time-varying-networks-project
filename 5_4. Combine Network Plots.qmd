---
title: "5_4. Combine Network Plots"
format: html
editor: visual
---

```{r, include = FALSE}
library(qgraph)
library(png)
library(mgm)
library(gridExtra)
library(grid)
library(gridGraphics)
library(furrr)
library(patchwork)
library(tidyverse)

set.seed(420)
wd <- getwd()
setwd(wd)

```

Keep SIDs that have all networks (lagged, con, and stationary) for the grids

```{r}
load(sprintf("%s/Data/tvvar_plots.RData", wd)) #tibble w lagged plots
load(sprintf("%s/Data/tvmgm_plots.RData", wd)) #tibble w contemp plots
load(sprintf("%s/Data/stationary_plots.RData", wd)) #tibble w stationary plots

#rename
tvvar_plots <- tvvar_plots %>%
  rename(lag_bw = bw)

tvmgm_plots <- tvmgm_plots %>%
  rename(con_bw = bw)

#mega df
network_plots <- tvvar_plots %>%
  left_join(tvmgm_plots, by = join_by(SID)) %>%
  left_join(stationary_plots, by = join_by(SID)) %>%
  na.omit()

save(network_plots, file = "Data/network_plots.RData")

#some stationary networks aren't in it but i have all the pdf's of them. this is for the 2x6
```

```{r}
load(sprintf("%s/Data/network_plots.RData", wd)) #tibble w stationary plots created in code chunk above
```

Exemplar

```{r}
#grobbing function that scales networks 
qgraph_to_grob <- function(qgraph_obj) {
  # Create a temporary file
  temp_file <- tempfile(fileext = ".png")
  
  # Use CairoPNG for high-quality rendering
  Cairo::CairoPNG(temp_file, width = 1500 * 1.25, height = 1500 * 1.5, dpi = 600)  
  plot(qgraph_obj)
  dev.off()
  
  # Read the PNG file and convert it to a grob
  png_image <- png::readPNG(temp_file)
  grob <- grid::rasterGrob(png_image, interpolate = TRUE)  
  
  # Increase size by scaling the grob
  scaled_grob <- grid::grobTree(
    grob,
    vp = grid::viewport(width = 1.25, height = 1.5) # Scale the grob
  )
  
  return(scaled_grob)
}

arrange_participant_plots <- function(participant) {
  
  ## Networks
  
  # Time-Varying Contemporaneous (A)
  tvmgm_networks <- wrap_plots(lapply(1:5, function(tp) {
    wrap_elements(full = qgraph_to_grob(network_plots$con_networks[[participant]][[as.character(tp)]]))
  }), ncol = 5)
  
  # Stationary Contemporaneous (B)
  stationary_contemp <- wrap_elements(full = qgraph_to_grob(network_plots$stat_con_networks[[participant]]))
  
  # Time-Varying Lagged (C)
  tvvar_networks <- wrap_plots(lapply(1:5, function(tp) {
    wrap_elements(full = qgraph_to_grob(network_plots$lag_networks[[participant]][[as.character(tp)]]))
  }), ncol = 5)
  
  # Stationary Lagged (D)
  stationary_lagged <- wrap_elements(full = qgraph_to_grob(network_plots$stat_lag_networks[[participant]]))
  
  ## Create 2x2 Grid
# Add a spacer column between the two groups
top_row <- wrap_plots(tvmgm_networks, plot_spacer(), stationary_contemp, plot_spacer(), ncol = 4, widths = c(4.9, 0.2, 0.74, 0.05)) +
  theme(plot.margin = margin(-20, 0, -20, 0))

bottom_row <- wrap_plots(tvvar_networks, plot_spacer(), stationary_lagged, plot_spacer(), ncol = 4, widths = c(4.9, 0.2, 0.74, 0.05)) +
  theme(plot.margin = margin(-20, 0, -20, 0))

  
  # Combine rows
  full_plot <- wrap_plots(top_row, bottom_row, ncol = 1, heights = c(4,4)) + 
    plot_annotation(
      tag_levels = list(c(paste0("  A) TV Con (bw = ", as.character(round(network_plots$con_bw[[participant]],2)), ")  "), 
                          rep("                                          ", 4), 
                          " B) Stat Con", 
                          paste0("  C) TV Lag (bw = ", as.character(round(network_plots$lag_bw[[participant]],2)), ")  "), 
                          rep("                                          ", 4), "D) Stat Lag"))
    ) &
    theme(plot.tag = element_text(size = 23, face = "bold", family = "Arial")
          )
  
  ## ADD DIVIDER LINES WITHOUT BREAKING THE GRID
  
  vertical_line <- grid::linesGrob(
    x = unit(5/6, "npc"),   # Exact position between columns
    y = unit(c(0, 1), "npc"),
    gp = gpar(col = "black", lwd = 5)
  )
  
  horizontal_line <- grid::linesGrob(
    x = unit(c(0, 1), "npc"),
    y = unit(0.5, "npc"),   # Exact horizontal midline
    gp = gpar(col = "black", lwd = 5)
  )
  
  ## LOCK THE LINES IN PLACE
  full_plot <- full_plot +
    inset_element(vertical_line, left = .785, right = .785, bottom = -0.5, top = 2.3) +
    inset_element(horizontal_line, left = -0.5, right = 1.5, bottom = 1.08, top = 1.08)

## Add a clean black border around the entire plot
full_plot <- full_plot +
  plot_annotation(
    theme = theme(
      plot.background = element_rect(color = "black", fill = NA, size = 5)
    )
  )


  return(full_plot)
}


# Save exemplar to a PDF
pdf("Manuscript Tables and Figures/Exemplar Network Grid.pdf", width = 26, height = 14)
arrange_participant_plots(159)
dev.off()

#png
png("Manuscript Tables and Figures/Exemplar Network Grid.png", 
    width = 26, height = 14, units = "in", res = 500)
arrange_participant_plots(159)
dev.off()

```

2x6 functions

```{r}
qgraph_to_grob <- function(qgraph_obj) {
  # Create a temporary file
  temp_file <- tempfile(fileext = ".png")
  
  # Use CairoPNG for high-quality rendering
  Cairo::CairoPNG(temp_file, width = 500, height = 500, dpi = 300)  
  plot(qgraph_obj)
  dev.off()
  
  # Read the PNG file and convert it to a grob
  png_image <- png::readPNG(temp_file)
  grob <- grid::rasterGrob(png_image, interpolate = TRUE)  # Convert to grob
  
  return(grob)
}

arrange_participant_plots <- function(participant) {
  
  ## Networks
  
  # Time-Varying Contemporaneous (A)
  tvmgm_networks <- wrap_plots(lapply(1:5, function(tp) {
    wrap_elements(full = qgraph_to_grob(network_plots$con_networks[[participant]][[as.character(tp)]]))
  }), ncol = 5)
  
  # Stationary Contemporaneous (B)
  stationary_contemp <- wrap_elements(full = qgraph_to_grob(network_plots$stat_con_networks[[participant]]))
  
  # Time-Varying Lagged (C)
  tvvar_networks <- wrap_plots(lapply(1:5, function(tp) {
    wrap_elements(full = qgraph_to_grob(network_plots$lag_networks[[participant]][[as.character(tp)]]))
  }), ncol = 5)
  
  # Stationary Lagged (D)
  stationary_lagged <- wrap_elements(full = qgraph_to_grob(network_plots$stat_lag_networks[[participant]]))
  
  ## Create 2x2 Grid
  
  top_row <- wrap_plots(tvmgm_networks, stationary_contemp, ncol = 2, widths = c(5, .65))
  bottom_row <- wrap_plots(tvvar_networks, stationary_lagged, ncol = 2, widths = c(5, .65))
  
  # Combine rows
  full_plot <- wrap_plots(top_row, bottom_row, ncol = 1) +
    plot_annotation(
      title = paste0("Participant ", network_plots$SID[[participant]], "'s Networks"),
    theme = theme(
      plot.title = element_text(hjust = 0.5, face = "bold", size = 30)
    )) + plot_annotation(
      tag_levels = list(c(paste0("A) TV Con (bw = ", as.character(round(network_plots$con_bw[[participant]],2)), ")  "), 
                          rep("                                        ", 4), 
                          "   B) Stat Con", 
                          paste0("A) TV Lag (bw = ", as.character(round(network_plots$lag_bw[[participant]],2)), ")  "), 
                          rep("                                        ", 4), "   D) Stat Lag"))
    ) &
    theme(plot.tag = element_text(size = 23, face = "bold"))
  
  ## ADD DIVIDER LINES WITHOUT BREAKING THE GRID
  
  vertical_line <- grid::linesGrob(
    x = unit(5/6, "npc"),   # Exact position between columns
    y = unit(c(0, 1), "npc"),
    gp = gpar(col = "black", lwd = 5)
  )
  
  horizontal_line <- grid::linesGrob(
    x = unit(c(0, 1), "npc"),
    y = unit(0.5, "npc"),   # Exact horizontal midline
    gp = gpar(col = "black", lwd = 5)
  )
  
  ## LOCK THE LINES IN PLACE
  full_plot <- full_plot +
    inset_element(vertical_line, left = .79, right = .79, bottom = -0.5, top = 2.3) +
    inset_element(horizontal_line, left = -0.5, right = 1.5, bottom = 1.1, top = 1.1)

    return(full_plot)
}


# Generate all participant plots
participant_plots <- lapply(1:nrow(network_plots), arrange_participant_plots)

# Save all participant plots to a PDF
pdf("Figures/Networks/All Participants Network Grids.pdf", width = 24, height = 15)
for (plot in participant_plots) {
  print(plot)
}
dev.off()

#dont need pngs
```
